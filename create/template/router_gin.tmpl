package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
)

type option func(engine *gin.Engine)

var ops []option

func initRouter() {
	r := gin.Default()
	for _, v := range ops {
		v(r)
	}
	srv := &http.Server{
		Addr:    conf.Port,
		Handler: r,
	}
	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatal().Err(err).Msg("shutting down the server error.")
		}
	}()
	logger.Info().Msg("run on "+conf.Port)
	quit := make(chan os.Signal)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	logger.Info().Msg("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		logger.Fatal().Err(err).Msg("shutting down the server error.")
	}
	logger.Info().Msg("Server exiting")
}
