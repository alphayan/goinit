package main

import (
	"github.com/fsnotify/fsnotify"
	"github.com/rs/zerolog"
	"github.com/spf13/viper"
)

// Config 配置文件结构体
type Config struct {
	Redis         bool   //开启redis
	RedisHost     string //redis地址
	RedisPort     string //redis端口
	RedisPassword string //redis密码
	RedisDB       int    //redis数据库 0-15

	DB             bool   //开启DB
	DBHost         string //DB地址
	DBPort         string //DB端口
	DBUsername     string //DB用户
	DBPassword     string //DB密码
	DBName         string //DB数据库
	DBDebug        bool   //开启数据库sql语句
	DBMaxIdleConns int    //db最大连接池
	DBMaxOpenConns int    //db最大连接数

	Port string //http端口
}

// TomlConfig toml的配置文件
type TomlConfig struct {
	Runmode Runmode
	Pro     Pro
	Dev     Dev
}

type Pro = Config
type Dev = Config

type Runmode struct {
	Runmode string
}

var conf = new(Config)

var logger = zerolog.New(zerolog.NewConsoleWriter(func(w *zerolog.ConsoleWriter) {
	w.TimeFormat = "2006-01-02 15:04:05"
})).With().Timestamp().Logger()

func initConfig() {
	viper.SetConfigName("config")         //  设置配置文件名 (不带后缀)
	viper.AddConfigPath("/etc/goecho/")   // 第一个搜索路径
	viper.AddConfigPath("$HOME/.goecho/") // 可以多次调用添加路径
	viper.AddConfigPath(".")              // 比如添加当前目录
	err := viper.ReadInConfig()           // 搜索路径，并读取配置数据
	if err != nil {
		logger.Fatal().Msgf("Fatal error config file: %s\n", err.Error())
	}
	tc := new(TomlConfig)
	if err := viper.Unmarshal(tc); err != nil {
		logger.Fatal().Msg(err.Error())
	}
	if tc.Runmode.Runmode == "dev" {
		*conf = tc.Dev
		logger = logger.With().Caller().Logger().Level(zerolog.DebugLevel)
	} else {
		*conf = tc.Pro
		logger = logger.Level(zerolog.InfoLevel)
	}
	logger.Info().Msg("初始化config成功")
	viper.WatchConfig()
	viper.OnConfigChange(func(in fsnotify.Event) {
		viper.ReadInConfig()
		viper.Unmarshal(tc)
		if tc.Runmode.Runmode == "dev" {
			*conf = tc.Dev
			logger = logger.With().Caller().Logger().Level(zerolog.DebugLevel)
		} else {
			*conf = tc.Pro
			logger = logger.Level(zerolog.InfoLevel)
		}
	})
}
