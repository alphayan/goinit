package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/labstack/echo/v4"
)

type option func(*echo.Echo)

var ops []option

func initRouter() {
	e := echo.New()
	e.HideBanner = true
	e.HidePort = true
	e.GET("/", func(c echo.Context) error {
		return c.String(200, "Hello, World!")
	}).Name = "root"
	for _, o := range ops {
		o(e)
	}
	for _, v := range e.Routes() {
		logger.Info().Str(v.Name, v.Path).Msg("")
	}
	go func() {
		if err := e.Start(conf.Port); err != nil && err != http.ErrServerClosed {
			logger.Fatal().Err(err).Msg("shutting down the server error.")
		}
	}()
	logger.Info().Msg("run on " + conf.Port)
	quit := make(chan os.Signal)
	signal.Notify(quit, os.Interrupt)
	<-quit
	logger.Info().Msg("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		logger.Fatal().Err(err).Msg("shutting down the server error.")
	}
	logger.Info().Msg("Server exiting")
}
